<?php

namespace App\Admin\Controllers\Order;

use App\Admin\Extensions\Model\OrderBaseModal;
use App\Models\Brand;
use App\Models\Order;
use App\Models\ProductOrder;
use App\Models\Product;
use Encore\Admin\Controllers\AdminController;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;

class OrderController extends AdminController
{
    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = '基础订单';

    public function index(Content $content)
    {
        $content->body(view('admin.order.info'));
        return parent::index($content); // TODO: Change the autogenerated stub
    }

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $grid = new Grid(new Order());
        $grid->model()->orderByDesc('created_at');
        // 关闭操作列
        $grid->disableActions();
        // 关闭新增按钮
        $grid->disableCreateButton();
        $grid->column('id', __('Id'))->sortable();
        $grid->column('orderno', __('订单编号'))->display(function ($value) {
            return '<a data-toggle="modal" data-target="#orderInfoModal" style="margin:0 3px;cursor: pointer" data-oid="' . $value . '" title="点击查看订单详情" >' . $value . '</a>';
        });
        $grid->column('paidno', __('支付流水号'));
        $grid->column('user.name', __('用户名称'));
        $grid->column('productOrder.brand_id', __('品牌名称'))->display(function ($value) {
            return Brand::query()->find($value)['name'];
        });
        $grid->column('price', __('总价格'))->sortable();
        $grid->column('shipping_price', __('配送价格'))->sortable();
        $grid->column('pay_price', __('支付价格'))->sortable();
        $grid->column('productOrder.show_status', __('订单状态'))->display(function ($value) {
            return ProductOrder::SHOW_STATUS[$value];
        });
        $grid->column('paylog.pay_name', __('支付方式'));
        $grid->column('pay_status', __('支付状态'))->display(function ($value) {
            return Order::PAY_STATUS[$value];
        });
        $grid->column('source', __('订单来源'))->display(function ($value) {
            return Order::SOURCE[$value];
        });
        $grid->column('created_at', __('创建时间'));
        $grid->column('updated_at', __('更新时间'));
        $grid->filter(function ($filter) {
            $filter->like('orderno', '订单编号');
            $filter->like('paidno', '支付流水号');
            $filter->like('user.name', '用户名称');
            $filter->where(function ($query) {
                $query->whereHas('productOrder.brand', function ($query) {
                    $query->where('name', 'like', "%{$this->input}%");
                });
            }, '品牌名称');
            $filter->where(function ($query) {
                $query->whereHas('productOrder.productOrderChild', function ($query) {
                    $query->whereIn('product_id', Product::query()->where('name', 'like', "%{$this->input}%")->pluck('id'));
                });
            }, '商品名称');
            $filter->equal('order_status', '订单状态')->select(Order::ORDER_STATUS);
            $filter->like('paylog.pay_name', '支付方式');
            $filter->equal('pay_status', '支付状态')->select(Order::PAY_STATUS);
            $filter->equal('source', '订单来源')->select(Order::SOURCE);
            $filter->between('created_at', '创建时间')->datetime();
        });
        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed $id
     * @return Show
     */
    protected function detail($id)
    {
        $show = new Show(Order::findOrFail($id));

        $show->field('id', __('Id'));
        $show->field('orderno', __('Orderno'));
        $show->field('paidno', __('Paidno'));
        $show->field('user_id', __('User id'));
        $show->field('price', __('Price'));
        $show->field('shipping_price', __('Shipping price'));
        $show->field('pay_price', __('PayLog price'));
        $show->field('order_status', __('Order status'));
        $show->field('pay_status', __('PayLog status'));
        $show->field('source', __('Source'));
        $show->field('created_at', __('Created at'));
        $show->field('updated_at', __('Updated at'));
        $show->field('deleted_at', __('Deleted at'));

        return $show;
    }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new Order());

        $form->text('orderno', __('Orderno'));
        $form->text('paidno', __('Paidno'));
        $form->number('user_id', __('User id'));
        $form->decimal('price', __('Price'));
        $form->decimal('shipping_price', __('Shipping price'))->default(0.00);
        $form->decimal('pay_price', __('PayLog price'));
        $form->switch('order_status', __('Order status'));
        $form->switch('pay_status', __('PayLog status'));
        $form->switch('source', __('Source'));

        return $form;
    }
}
